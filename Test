local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Block Spin Script " .. Fluent.Version,
    SubTitle = "by dSeth",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "crop" }),
    Combat = Window:AddTab({ Title = "Combat", Icon = "crosshair" }),
    Esp = Window:AddTab({ Title = "Visuals", Icon = "skull" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })







    Tabs.Combat:AddParagraph({
        Title = "Paragraph",
        Content = "Execute the Silent Aim just Once, or u will get bugged"
    })

    Tabs.Combat:AddButton({ 
        Title = "Silent Aim",
        Description = "Best Silent Aim",
        Callback = function()
            Window:Dialog({
                Title = "ConfirmaciÃ³n",
                Content = "Â¿Are you sure you want to execute this?",
                Buttons = {
                    {
                        Title = "Yes",
                        Callback = function()
                            loadstring(game:HttpGet("https://raw.githubusercontent.com/SETHHHX/test/refs/heads/main/YOU%20KNOW"))()
                        end
                    },
                    {
                        Title = "No",
                        Callback = function()
                            print("Cancelado.")
                        end
                    }
                }
            })
        end
    })
    


























--ESP THINGS


Tabs.Esp:AddSection("ATMS")

local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("CoreGui")

local atmEspConnection

-- Crea el ESP con Highlight al modelo
local function createHighlight(model)
    local highlight = Instance.new("Highlight")
    highlight.Name = "ATMESP"
    highlight.Adornee = model
    highlight.FillColor = Color3.fromRGB(255, 0, 0)
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = CoreGui
end

-- Elimina todos los ESPs anteriores
local function clearESP()
    for _, obj in ipairs(CoreGui:GetChildren()) do
        if obj:IsA("Highlight") and obj.Name == "ATMESP" then
            obj:Destroy()
        end
    end
end

-- Verifica si el ATM estÃ¡ activo
local function isATMActive(atmModel)
    local module = require(game.ReplicatedStorage.Modules.Game.ATM.ATM)
    for _, obj in module.class.objects do
        if obj.instance == atmModel then
            return not obj.states.disabled.get()
        end
    end
    return false
end

-- Dibuja los ESPs solo si estÃ¡n activos
local function drawESP()
    clearESP()
    for _, atm in ipairs(Workspace.Map.Props:GetChildren()) do
        if atm.Name == "ATM" and isATMActive(atm) then
            createHighlight(atm)
        end
    end
end

-- âœ… Toggle con Fluent UI
local Toggle = Tabs.Esp:AddToggle("ATMESP_Toggle", {
    Title = "ATM ESP",
    Default = false
})

Toggle:OnChanged(function()
    if Options.ATMESP_Toggle.Value then
        atmEspConnection = RunService.RenderStepped:Connect(function()
            pcall(drawESP)
        end)
    else
        if atmEspConnection then
            atmEspConnection:Disconnect()
            atmEspConnection = nil
        end
        clearESP()
    end
end)

Options.ATMESP_Toggle:SetValue(false)










--PLAYER ESP
Tabs.Esp:AddSection("PLAYERS ESP")


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local nameESP = {}
local connections = {}
local updateConnection

-- Crear name tag para jugador
local function createNameTag(player)
    if nameESP[player] then return end

    local text = Drawing.new("Text")
    text.Size = 13
    text.Center = true
    text.Outline = true
    text.Font = 2
    text.Color = Color3.fromRGB(255, 255, 255)
    text.Visible = false

    nameESP[player] = text
end

-- Eliminar name tag
local function removeNameTag(player)
    if nameESP[player] then
        nameESP[player]:Remove()
        nameESP[player] = nil
    end
end

-- Actualizar name tag
local function updateNameTag(player)
    local text = nameESP[player]
    if not text then return end

    local character = player.Character
    if not character then text.Visible = false return end

    local head = character:FindFirstChild("Head")
    if not head then text.Visible = false return end

    local pos, onScreen = Camera:WorldToViewportPoint(head.Position + Vector3.new(0, 0.5, 0))
    if not onScreen then text.Visible = false return end

    local distance = (Camera.CFrame.Position - head.Position).Magnitude
    local size = math.clamp(20 - distance * 0.15, 13, 20)

    text.Text = player.Name
    text.Size = size
    text.Position = Vector2.new(pos.X, pos.Y - size - 5)
    text.Visible = true
end

-- ðŸŸ¢ Toggle (Fluent UI) con limpieza completa
local Toggle = Tabs.Esp:AddToggle("PlayerNames", {
    Title = "Names",
    Default = false
})

Toggle:OnChanged(function()
    if Options.PlayerNames.Value then
        -- Crear name tag para jugadores actuales
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                if player.Character then
                    createNameTag(player)
                end
                connections[player] = player.CharacterAdded:Connect(function()
                    task.wait(0.1)
                    createNameTag(player)
                end)
            end
        end

        -- Nuevos jugadores
        connections["PlayerAdded"] = Players.PlayerAdded:Connect(function(player)
            if player == LocalPlayer then return end
            connections[player] = player.CharacterAdded:Connect(function()
                task.wait(0.1)
                createNameTag(player)
            end)
        end)

        -- Jugadores que se van
        connections["PlayerRemoving"] = Players.PlayerRemoving:Connect(function(player)
            removeNameTag(player)
            if connections[player] then
                connections[player]:Disconnect()
                connections[player] = nil
            end
        end)

        -- ActualizaciÃ³n por frame
        updateConnection = RunService.RenderStepped:Connect(function()
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and nameESP[player] then
                    updateNameTag(player)
                end
            end
        end)
    else
        -- Apagar y limpiar
        if updateConnection then updateConnection:Disconnect() updateConnection = nil end

        for _, text in pairs(nameESP) do
            text:Remove()
        end

        for _, conn in pairs(connections) do
            conn:Disconnect()
        end

        table.clear(nameESP)
        table.clear(connections)
    end
end)

Options.PlayerNames:SetValue(false)








local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local esp = {}
local connections = {}
local espConnection

local function createESP(player)
    if esp[player] then return end

    local boxOutline = Drawing.new("Square")
    boxOutline.Thickness = 4
    boxOutline.Color = Color3.new(0, 0, 0)
    boxOutline.Filled = false
    boxOutline.Visible = false

    local box = Drawing.new("Square")
    box.Thickness = 2
    box.Color = Color3.fromRGB(0, 255, 255)
    box.Filled = false
    box.Visible = false

    local healthBar = Drawing.new("Line")
    healthBar.Thickness = 2
    healthBar.Color = Color3.fromRGB(0, 255, 0)
    healthBar.Visible = false

    esp[player] = {
        Box = box,
        Outline = boxOutline,
        Health = healthBar
    }
end

local function removeESP(player)
    if esp[player] then
        if esp[player].Box then esp[player].Box:Remove() end
        if esp[player].Outline then esp[player].Outline:Remove() end
        if esp[player].Health then esp[player].Health:Remove() end
        esp[player] = nil
    end
end

local function updateESP(player, character)
    local hrp = character:FindFirstChild("HumanoidRootPart")
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not hrp or not humanoid then return end

    local pos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
    if not onScreen then
        esp[player].Box.Visible = false
        esp[player].Outline.Visible = false
        if esp[player].Health then esp[player].Health.Visible = false end
        return
    end

    local scaleFactor = 1.6
    local height = 6 * scaleFactor
    local top = Camera:WorldToViewportPoint(hrp.Position + Vector3.new(0, height / 2, 0))
    local bottom = Camera:WorldToViewportPoint(hrp.Position - Vector3.new(0, height / 2, 0))

    local boxHeight = math.abs(top.Y - bottom.Y)
    local boxWidth = boxHeight / 2

    local x = pos.X - boxWidth / 2
    local y = pos.Y - boxHeight / 2

    -- Box
    local box = esp[player].Box
    box.Position = Vector2.new(x, y)
    box.Size = Vector2.new(boxWidth, boxHeight)
    box.Visible = true

    local outline = esp[player].Outline
    outline.Position = box.Position
    outline.Size = box.Size
    outline.Visible = true

    -- Health bar
    if Options.HealthBar.Value then
        local hpRatio = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)
        local barHeight = boxHeight * hpRatio
        local barX = x - 6
        local barY = y + boxHeight

        local health = esp[player].Health
        health.From = Vector2.new(barX, barY)
        health.To = Vector2.new(barX, barY - barHeight)
        health.Visible = true

        if hpRatio > 0.5 then
            health.Color = Color3.fromRGB(0, 255, 0)
        elseif hpRatio > 0.25 then
            health.Color = Color3.fromRGB(255, 255, 0)
        else
            health.Color = Color3.fromRGB(255, 0, 0)
        end
    else
        esp[player].Health.Visible = false
    end
end

-- âœ… Toggle con lÃ³gica completa
local Toggle = Tabs.Esp:AddToggle("BoxESP", {Title = "Box ESP", Default = false})
local HealthToggle = Tabs.Esp:AddToggle("HealthBar", {Title = "Health Bar", Default = false})

Toggle:OnChanged(function()
    if Options.BoxESP.Value then
        -- Crear ESP a todos los jugadores actuales
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                if player.Character then
                    createESP(player)
                end
                connections[player] = player.CharacterAdded:Connect(function()
                    task.wait(0.1)
                    createESP(player)
                end)
            end
        end

        -- Detectar nuevos jugadores
        connections["PlayerAdded"] = Players.PlayerAdded:Connect(function(player)
            if player == LocalPlayer then return end
            connections[player] = player.CharacterAdded:Connect(function()
                task.wait(0.1)
                createESP(player)
            end)
        end)

        -- Detectar jugadores que se van
        connections["PlayerRemoving"] = Players.PlayerRemoving:Connect(function(player)
            removeESP(player)
            if connections[player] then
                connections[player]:Disconnect()
                connections[player] = nil
            end
        end)

        -- Actualizar cada frame
        espConnection = RunService.RenderStepped:Connect(function()
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and esp[player] then
                    updateESP(player, player.Character)
                end
            end
        end)
    else
        -- Apagar todo
        if espConnection then espConnection:Disconnect() espConnection = nil end

        for player, _ in pairs(esp) do
            removeESP(player)
        end

        for _, conn in pairs(connections) do
            conn:Disconnect()
        end

        table.clear(esp)
        table.clear(connections)
    end
end)

Options.BoxESP:SetValue(false)
Options.HealthBar:SetValue(false)




local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local tracers = {}
local connections = {}
local tracerConnection

-- Crear tracer para un jugador
local function createTracer(player)
    if tracers[player] then return end

    local tracer = Drawing.new("Line")
    tracer.Thickness = 1.5
    tracer.Color = Color3.fromRGB(255, 255, 255)
    tracer.Visible = false

    tracers[player] = tracer
end

-- Eliminar tracer
local function removeTracer(player)
    if tracers[player] then
        tracers[player]:Remove()
        tracers[player] = nil
    end
end

-- Actualizar tracer
local function updateTracer(player)
    local character = player.Character
    local tracer = tracers[player]
    if not character or not tracer then return end

    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then
        tracer.Visible = false
        return
    end

    local pos, onScreen = Camera:WorldToViewportPoint(hrp.Position)
    if not onScreen then
        tracer.Visible = false
        return
    end

    local from = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
    local to = Vector2.new(pos.X, pos.Y)

    tracer.From = from
    tracer.To = to
    tracer.Visible = true
end

-- âœ… Toggle con lÃ³gica completa
local Toggle = Tabs.Esp:AddToggle("PlayerTracers", {
    Title = "Player Tracers",
    Default = false
})

Toggle:OnChanged(function()
    if Options.PlayerTracers.Value then
        -- Crear tracer a todos los jugadores actuales
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer then
                if player.Character then
                    createTracer(player)
                end
                connections[player] = player.CharacterAdded:Connect(function()
                    task.wait(0.1)
                    createTracer(player)
                end)
            end
        end

        -- Nuevos jugadores
        connections["PlayerAdded"] = Players.PlayerAdded:Connect(function(player)
            if player == LocalPlayer then return end
            connections[player] = player.CharacterAdded:Connect(function()
                task.wait(0.1)
                createTracer(player)
            end)
        end)

        -- Jugadores que se van
        connections["PlayerRemoving"] = Players.PlayerRemoving:Connect(function(player)
            removeTracer(player)
            if connections[player] then
                connections[player]:Disconnect()
                connections[player] = nil
            end
        end)

        -- ActualizaciÃ³n cada frame
        tracerConnection = RunService.RenderStepped:Connect(function()
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and tracers[player] then
                    updateTracer(player)
                end
            end
        end)
    else
        -- Apagar y limpiar todo
        if tracerConnection then tracerConnection:Disconnect() tracerConnection = nil end

        for _, tracer in pairs(tracers) do
            tracer:Remove()
        end

        for _, conn in pairs(connections) do
            conn:Disconnect()
        end

        table.clear(tracers)
        table.clear(connections)
    end
end)

Options.PlayerTracers:SetValue(false)









    

    
    local AutoHackConnection

    -- âœ… Toggle usando Tabs.Main:AddToggle
    local Toggle = Tabs.Main:AddToggle("MyToggle", {
        Title = "Auto Mini Game ðŸ’»",
        Default = false
    })
    
    Toggle:OnChanged(function()
        if Toggle.Value then
            AutoHackConnection = game:GetService("RunService").RenderStepped:Connect(function()
                local SliderMinigame = game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("SliderMinigame")
    
                if SliderMinigame then
                    for _, outerFrame in pairs(SliderMinigame:GetChildren()) do
                        if outerFrame:IsA("Frame") then
                            local inner = outerFrame:FindFirstChildWhichIsA("Frame")
                            if inner then
                                local needle = inner:FindFirstChildWhichIsA("Frame", true)
                                local target = nil
    
                                for _, frame in pairs(inner:GetChildren()) do
                                    if frame:IsA("Frame") and frame.Name ~= needle.Name then
                                        target = frame
                                        break
                                    end
                                end
    
                                if needle and target then
                                    local needlePos = needle.AbsolutePosition.X
                                    local needleSize = needle.AbsoluteSize.X
                                    local targetPos = target.AbsolutePosition.X
                                    local targetSize = target.AbsoluteSize.X
    
                                    if needlePos + needleSize > targetPos and needlePos < targetPos + targetSize then
                                        local VirtualInputManager = game:GetService("VirtualInputManager")
                                        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
                                        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, game, 0)
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        else
            if AutoHackConnection then
                AutoHackConnection:Disconnect()
                AutoHackConnection = nil
            end
        end
    end)
    
    -- (Opcional) Forzar que inicie desactivado
    Options.MyToggle:SetValue(false)
    






































-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
end
